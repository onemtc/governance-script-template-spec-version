name: gu_deploytotest.yml

on: [workflow_dispatch]

env:
  baselineResourceGroup: ghgovenv
  baselineVariableStorageAccountName: ghgovenvnotsecrets
  baselineVariableTableName: pipelinevariables
  baselineTablePartitionKey: totestvariables

jobs:
  buildanddeploy:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
        
    - name: Install dependencies
      run: dotnet restore "Code To Push To Environments/App Service Web App/DevAppSample.sln"
      
    - name: Build
      run: |
       dotnet build --configuration Release --no-restore "Code To Push To Environments/App Service Web App/DevAppSample.sln"
       dotnet publish --configuration Release -o "./releaseoutput" "Code To Push To Environments/App Service Web App/DevAppSample.sln"
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        creds: ${{secrets.PF_AZURE_CREDENTIALS}}
        
    - name: Get Primary Storage Key
      run: echo "STORAGE_KEY=$(az storage account keys list -g $baselineResourceGroup -n $baselineVariableStorageAccountName --query "[0].{value:value}" -o tsv)" >> $GITHUB_ENV 
      
    - name: Echo Storage Key
      run: echo $STORAGE_KEY
        
    - name: Set Storage Connection String
      run: echo "CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=$baselineVariableStorageAccountName;AccountKey=$STORAGE_KEY;EndpointSuffix=core.windows.net" >> $GITHUB_ENV 
    
    - name: Echo Connection String
      run: echo $CONNECTION_STRING

    - name: Get Resource Group Name
      run: echo "RESOURCEGROUPNAME=$(az storage entity show --connection-string $CONNECTION_STRING --table-name $baselineVariableTableName --partition-key $baselineTablePartitionKey --row-key resourcegroupname --select Content --query "Content" -o tsv)" >> $GITHUB_ENV
        
    - name: Get Location
      run: echo "LOCATION=$(az storage entity show --connection-string $CONNECTION_STRING --table-name $baselineVariableTableName --partition-key $baselineTablePartitionKey --row-key location --select Content --query "Content" -o tsv)" >> $GITHUB_ENV
        
    - name: Get App Service Plan Name
      run: echo "APPSERVICEPLANNAME=$(az storage entity show --connection-string $CONNECTION_STRING --table-name $baselineVariableTableName --partition-key $baselineTablePartitionKey --row-key appserviceplanname --select Content --query "Content" -o tsv)" >> $GITHUB_ENV

    - name: Get App Service Name
      run: echo "APPSERVICENAME=$(az storage entity show --connection-string $CONNECTION_STRING --table-name $baselineVariableTableName --partition-key $baselineTablePartitionKey --row-key appservicename --select Content --query "Content" -o tsv)" >> $GITHUB_ENV
        
    - name: Get Subscription Id
      run: echo "SUBSCRIPTIONID=$(az storage entity show --connection-string $CONNECTION_STRING --table-name $baselineVariableTableName --partition-key $baselineTablePartitionKey --row-key subscriptionid --select Content --query "Content" -o tsv)" >> $GITHUB_ENV

    - name: Show Pipeline Variables
      run: | 
        echo "Partition key:" $baselineTablePartitionKey
        echo "Resource group:" $RESOURCEGROUPNAME
        echo "Location:" $LOCATION 
        echo "App Service Plan Name:" $APPSERVICEPLANNAME 
        echo "App Service Name:" $APPSERVICENAME
        echo "Subscription Id:" $SUBSCRIPTIONID
    
    - name: Create Azure Resource Group
      run: az group create --location $LOCATION --name $RESOURCEGROUPNAME --subscription $SUBSCRIPTIONID
        
    - name: Get App Service Plan Template Spec Name
      run: echo "APPSERVICEPLANTEMPLATESPECNAME=$(az storage entity show --connection-string $CONNECTION_STRING --table-name $baselineVariableTableName --partition-key $baselineTablePartitionKey --row-key appserviceplantemplatespec --select Content --query "Content" -o tsv)" >> $GITHUB_ENV
 
    - name: Get App Service Plan Template Spec Version
      run: echo "APPSERVICEPLANTEMPLATESPECVERSION=$(az storage entity show --connection-string $CONNECTION_STRING --table-name $baselineVariableTableName --partition-key $baselineTablePartitionKey --row-key appserviceplantemplatespecversion --select Content --query "Content" -o tsv)" >> $GITHUB_ENV

    - name: Get App Service Plan Template Spec
      run: echo "APPSERVICEPLANTEMPLATESPEC=$(az ts show --name $APPSERVICEPLANTEMPLATESPECNAME --resource-group $baselineResourceGroup --version $APPSERVICEPLANTEMPLATESPECVERSION --query 'id')"  >> $GITHUB_ENV 
        
    - name: Deploy App Service Plan
      run: az deployment group create -g $RESOURCEGROUPNAME --template-spec $APPSERVICEPLANTEMPLATESPEC --parameters name=$APPSERVICEPLANNAME location=$LOCATION
        
    - name: Get App Service Template Spec Name
      run: echo "APPSERVICETEMPLATESPECNAME=$(az storage entity show --connection-string $CONNECTION_STRING --table-name $baselineVariableTableName --partition-key $baselineTablePartitionKey --row-key appservicetemplatespec --select Content --query "Content" -o tsv)" >> $GITHUB_ENV
 
    - name: Get App Service Template Spec Version
      run: echo "APPSERVICETEMPLATESPECVERSION=$(az storage entity show --connection-string $CONNECTION_STRING --table-name $baselineVariableTableName --partition-key $baselineTablePartitionKey --row-key appservicetemplatespecversion --select Content --query "Content" -o tsv)" >> $GITHUB_ENV

    - name: Get App Service Template Spec
      run: echo "APPSERVICETEMPLATESPEC=$(az ts show --name $APPSERVICETEMPLATESPECNAME --resource-group $baselineResourceGroup --version $APPSERVICETEMPLATESPECVERSION --query 'id')"  >> $GITHUB_ENV 
        
    - name: Deploy App Service
      run: az deployment group create -g $RESOURCEGROUPNAME  --template-spec $APPSERVICETEMPLATESPEC --parameters name=$APPSERVICENAME location=$LOCATION subscriptionId=$SUBSCRIPTIONID hostingPlanName=$APPSERVICEPLANNAME serverFarmResourceGroup=$RESOURCEGROUPNAME
    
    - name: 'Run Azure webapp deploy action'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{env.APPSERVICENAME}}
        package: "./releaseoutput"
        
    - name: Dispatch to run preprod workflow
      if: success()
      run: |
        curl -X POST https://api.github.com/repos/onemtc/governance-script-sandbox/dispatches \
            -H 'Accept: application/vnd.github.v3+json' \
            -H 'Authorization: token ${{ secrets.REPO_DISPATCH }}' \
            -d '{"event_type": "preprod"}'
       
